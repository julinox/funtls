package extensions

import (
	"encoding/binary"
)

var signAlgoSupported = map[uint16]int{
	0x0401: 1, //"rsa_pkcs1_sha256"
	0x0804: 2, //"rsa_pss_rsae_sha256"
	0x0501: 3, //"rsa_pkcs1_sha384"
	0x0805: 4, //"rsa_pss_rsae_sha384"
	0x0402: 5, //"dsa_sha256"
}

type SignatureAlgorithms struct {
	id         uint16
	size       int
	algorithms []uint16
}

type SignAlgoServer struct {
	Weight  int
	Current map[uint16]int
}

// Read the signature algorithms extension and choose the one
func newExtSignAlgos(buffer []byte) *SignatureAlgorithms {

	var sa SignatureAlgorithms

	if buffer == nil {
		return nil
	}

	offset := 2
	sa.id = 0x000D
	sa.size = int(binary.BigEndian.Uint16(buffer)) / 2
	sa.algorithms = make([]uint16, sa.size)
	for i := 0; i < sa.size; i++ {
		sa.algorithms[i] = binary.BigEndian.Uint16(buffer[offset:])
		offset += 2
	}

	return &sa
}

func SetAlgoPreference(weight int) *SignAlgoServer {

	var list SignAlgoServer

	list.Weight = weight
	list.Current = make(map[uint16]int)
	for k, v := range signAlgoSupported {
		list.Current[k] = weight * v
	}

	return &list
}

func (sa *SignatureAlgorithms) ID() uint16 {
	return 0x000D
}

func (sa *SignatureAlgorithms) Name() string {
	return extnsByID[sa.id]
}
