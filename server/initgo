package server

import (
	"os"
	"strings"
	ex "tlesio/tlssl/extensions"
	mx "tlesio/tlssl/modulos"
	"tlesio/tlssl/suite"
	"tlesio/tlssl/suite/ciphersuites"
)

var (
	_ENV_LOG_LEVEL_VAR_   = "TLS_LOG_LEVEL"
	_ENV_CLIENT_AUTH_VAR_ = "TLS_CLIENT_AUTH"
)

/*listener, err := net.Listen("tcp", port)
if err != nil {
	fun.lg.Error(err)
	return nil
}

server.tlsCtx = &tlssl.TLSContext{}
server.initTLSContext()
if server.err != nil {
	server.lg.Error("TLS Init err: ", server.err)
	return nil
}

server.lg.Info("TLS Context Initialized")
return listener*/
/*defer listener.Close()
server.lg.Info("Listening on PORT ", port)
for {
	conn, err := listener.Accept()
	if err != nil {
		server.lg.Error("error accepting connection:", err)
		continue
	}

	server.lg.Info("Connection accepted from ", conn.RemoteAddr())
	go server.handleConnection(conn)
}*/

/*func (server *serverOp) handleConnection(conn net.Conn) {

	defer conn.Close()
	buffer := make([]byte, 4096)
	n, err := conn.Read(buffer)
	if err != nil {
		server.lg.Error("error reading data:", err)
		return
	}

	if n <= 5 {
		server.lg.Warning("Very little Data")
		return
	}

	if len(buffer[:n]) <= 45 {
		server.lg.Warning("buffer is too small for a client hello")
		return
	}

	tHeader := tlssl.TLSHead(buffer)
	if tHeader.ContentType != tlssl.ContentTypeHandshake {
		server.lg.Warning("We do not negotiate with terrorist!")
		return
	}

	if tHeader.Len != len(buffer[tlssl.TLS_HEADER_SIZE:n]) {
		server.lg.Warning("Header length does not match buffer length")
		return
	}

	tHeaderHS := tlssl.TLSHeadHandShake(buffer[tlssl.TLS_HEADER_SIZE:])
	if tHeaderHS.HandshakeType != tlssl.HandshakeTypeClientHello {
		server.lg.Warning("Pretty rude from you not to say helo first")
		return
	}

	offset := tlssl.TLS_HEADER_SIZE + tlssl.TLS_HANDSHAKE_SIZE
	if tHeaderHS.Len != len(buffer[offset:n]) {
		server.lg.Warning("Handshake length does not match buffer length")
		return
	}

	handle, _ := Handle(server.tlsCtx, conn)
	if handle == nil {
		return
	}

	handle.LetsTalk(buffer[:n])
}*/

func (x *serverOp) initTLSContext() error {

	x.initTLSContexLg()
	x.initTLSContextModz()
	x.initTLSContextExtensions()
	x.tlsCtx.OptClientAuth = getTLSClientAuthOpt()
	return nil
}

func (x *serverOp) initTLSContextModz() {

	certs := []*mx.CertPaths{
		{PathCert: "./certs/server.crt", PathKey: "./certs/server.key"},
		//{PathCert: "./certs/server2.crt", PathKey: "./certs/server.key"},
	}

	suites := []suite.Suite{
		ciphersuites.NewAES_256_CBC_SHA(),
		ciphersuites.NewAES_256_CBC_SHA256(),
	}

	if x.err != nil {
		return
	}

	x.tlsCtx.Modz = mx.NewModuloZ()
	x.tlsCtx.Modz.InitTLSSuite(x.tlsCtx.Lg, suites)
	x.tlsCtx.Modz.InitCerts(x.tlsCtx.Lg, certs)
	x.err = x.tlsCtx.Modz.CheckModInit()
}

func (x *serverOp) initTLSContextExtensions() {

	if x.err != nil {
		return
	}

	x.tlsCtx.Exts = ex.NewExtensions(x.tlsCtx.Lg)
	x.tlsCtx.Exts.Register(ex.NewExtSignAlgo())
	//x.tlsCtx.Exts.Register(ex.NewExtSessionTicket())
	x.tlsCtx.Exts.Register(ex.NewExtSNI())
	//x.tlsCtx.Exts.Register(ex.NewExtEncryptThenMac())
	x.tlsCtx.Exts.Register(ex.NewExtRenegotiation())
}

func getTLSClientAuthOpt() bool {
	return strings.ToLower(os.Getenv(_ENV_CLIENT_AUTH_VAR_)) == "true"
}
