package keymaker

import (
	"fmt"
	"testing"
	"tlesio/tlssl/suite"
	"tlesio/tlssl/suite/suites"
)

// TLS_RSA_AES_256_CBC_SHA1
func TestSuite0x003D(t *testing.T) {

	lg := testLogger()
	traje := suites.NewAES_256_CBC_SHA256()
	if traje == nil {
		lg.Error("nil suite")
		return
	}

	iv := []byte{0x8d, 0x8b, 0x06, 0x2a, 0xf6, 0xad, 0xf9, 0x7d, 0xcd, 0xd1, 0xd0, 0x3f, 0x77, 0xb8, 0x56, 0xb7}

	encKey := []byte{0x1e, 0x04, 0xf1, 0xe3, 0xb9, 0x32, 0x88, 0x42, 0xa9, 0xe2, 0xb4, 0xfa, 0x40, 0xd5, 0x66, 0x15,
		0x29, 0xa6, 0x1b, 0x88, 0xce, 0x09, 0x50, 0x3f, 0x0f, 0x08, 0xf1, 0x3a, 0xe3, 0x55, 0x5a, 0xa4}

	macKey := []byte{0x76, 0xa2, 0xad, 0xe2, 0x04, 0xbe, 0xce, 0x94, 0x9a, 0x9e, 0xd9, 0xd9, 0x76, 0x97, 0x1c, 0xe5,
		0x42, 0x0d, 0x7a, 0x1f, 0x7b, 0xfc, 0xd0, 0xda, 0xcb, 0x66, 0x83, 0x5f, 0xdd, 0xdb, 0x3b, 0xb0}

	ciphertext := []byte{
		0xb7, 0xa2, 0x71, 0xdb, 0x64, 0x7e, 0xb5, 0x95, 0x79, 0x10, 0x19, 0x66, 0xc4, 0xa1, 0xec, 0x3c,
		0x14, 0xac, 0x6c, 0x25, 0x6d, 0x7d, 0x62, 0x45, 0x31, 0x36, 0x78, 0xa1, 0x4d, 0x68, 0x10, 0x13,
		0xfb, 0xec, 0xac, 0xa1, 0x36, 0x07, 0xdc, 0xe6, 0x02, 0x95, 0xe5, 0xa3, 0x78, 0xa5, 0xd3, 0xc5,
		0xa2, 0xdd, 0x6c, 0xa7, 0xa1, 0xb4, 0x28, 0xd5, 0x10, 0x04, 0x73, 0x53, 0x48, 0xdd, 0x9a, 0xb6,
		0x03, 0x27, 0x46, 0x51, 0xc6, 0xbc, 0xa5, 0xed, 0x3d, 0x85, 0x08, 0xea, 0x07, 0xdd, 0xb4, 0x3a,
	}

	ctx := &suite.SuiteContext{
		IV:      iv,
		Key:     encKey,
		HKey:    macKey,
		Data:    ciphertext,
		MacMode: suite.MTE,
	}

	plaintext, err := traje.CipherNot(ctx)
	if err != nil {
		lg.Errorf("ciphernot err: %v", err)
		return
	}

	fmt.Printf("%x\n", plaintext)
	fmt.Println()
}

func _TestSuite0x003DETM(t *testing.T) {

	lg := testLogger()
	traje := suites.NewAES_256_CBC_SHA256()
	if traje == nil {
		lg.Error("nil suite")
		return
	}

	iv := []byte{0x8d, 0x8b, 0x06, 0x2a, 0xf6, 0xad, 0xf9, 0x7d, 0xcd, 0xd1, 0xd0, 0x3f, 0x77, 0xb8, 0x56, 0xb7}

	encKey := []byte{0x1e, 0x04, 0xf1, 0xe3, 0xb9, 0x32, 0x88, 0x42, 0xa9, 0xe2, 0xb4, 0xfa, 0x40, 0xd5, 0x66, 0x15,
		0x29, 0xa6, 0x1b, 0x88, 0xce, 0x09, 0x50, 0x3f, 0x0f, 0x08, 0xf1, 0x3a, 0xe3, 0x55, 0x5a, 0xa4}

	macKey := []byte{0x76, 0xa2, 0xad, 0xe2, 0x04, 0xbe, 0xce, 0x94, 0x9a, 0x9e, 0xd9, 0xd9, 0x76, 0x97, 0x1c, 0xe5,
		0x42, 0x0d, 0x7a, 0x1f, 0x7b, 0xfc, 0xd0, 0xda, 0xcb, 0x66, 0x83, 0x5f, 0xdd, 0xdb, 0x3b, 0xb0}

	data := []byte{
		0xFF, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A,
		0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14,
		0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E,
		0x1F, 0x20, 0x21,
	}
	ctx := &suite.SuiteContext{
		IV:      iv,
		Key:     encKey,
		HKey:    macKey,
		Data:    data,
		MacMode: suite.ETM,
	}

	plaintext, err := traje.CipherNot(ctx)
	if err != nil {
		lg.Errorf("ciphernot err: %v", err)
		return
	}

	fmt.Println()
	fmt.Printf("%x\n", plaintext)
}
