package main

import (
	"crypto/hmac"
	"crypto/sha256"
	"encoding/hex"
	"fmt"
)

func main() {
	// Clave de MAC proporcionada (hex)
	macKeyHex := "76a2ade204bece949a9ed9d976971ce5420d7a1f7bfcd0dacb66835fdddb3bb0"
	macKey, _ := hex.DecodeString(macKeyHex)

	// Secuencia del mensaje Finished (primer mensaje cifrado)
	seqNum := make([]byte, 8)             // 64 bits = 8 bytes, inicializado en 0
	contentType := []byte{0x16}           // Handshake (viene de la cabecera TLS)
	protocolVersion := []byte{0x03, 0x03} // TLS 1.2
	length := []byte{0x00, 0x10}
	handshakeHeader := []byte{0x14, 0x00, 0x00, 0x0c}
	verifyData := []byte{0xc2, 0xe7, 0xe3, 0x61, 0x46, 0x62, 0x7f, 0xb6, 0x60, 0x27, 0x2f, 0xe2}

	// Construir la entrada para el HMAC
	hmacInput := append(seqNum, contentType...)
	hmacInput = append(hmacInput, protocolVersion...)
	hmacInput = append(hmacInput, length...)
	hmacInput = append(hmacInput, handshakeHeader...)
	hmacInput = append(hmacInput, verifyData...)

	fmt.Printf("%x\n", hmacInput)

	// Calcular el HMAC-SHA256
	mac := hmac.New(sha256.New, macKey)
	mac.Write(hmacInput)
	computedMac := mac.Sum(nil)

	// Mostrar el HMAC calculado
	fmt.Printf("HMAC Computado: %x\n", computedMac)
}
