package tlssl

import (
	"crypto/rand"
	"encoding/binary"
	"fmt"
	"math/big"
)

var ffdhe2048_p = []byte{
	0xFF, 0xFF, 0xFF, 0xFF, 0xAD, 0xF8, 0x54, 0x58, 0xA2, 0xBB, 0x4A, 0x9A,
	0xAF, 0xDC, 0x56, 0x20, 0x27, 0x3D, 0x3C, 0xF1, 0xD8, 0xB9, 0xC5, 0x83,
	0xCE, 0x2D, 0x36, 0x95, 0xA9, 0xE1, 0x36, 0x41, 0x14, 0x97, 0xED, 0x6B,
	0xC0, 0x54, 0xB1, 0xF3, 0xB4, 0x3F, 0xC6, 0x59, 0xD4, 0x6C, 0x62, 0x4E,
	0x0B, 0x55, 0x25, 0x6C, 0xD7, 0x36, 0x0C, 0xD5, 0x89, 0xA1, 0x64, 0xE4,
	0xF8, 0x95, 0x92, 0x5B, 0xB4, 0xBF, 0x81, 0x3F, 0xD6, 0x53, 0x8D, 0x8C,
	0x8F, 0xA9, 0x7B, 0xD2, 0xFE, 0x36, 0x09, 0x48, 0x1C, 0x9E, 0x63, 0x7A,
	0xC4, 0x39, 0x8F, 0xFD, 0xB8, 0xBE, 0xFC, 0x84, 0x8A, 0xD9, 0x22, 0x22,
	0x2E, 0x04, 0xA4, 0x03, 0x7C, 0x07, 0x13, 0xEB, 0x57, 0xA8, 0x1A, 0x23,
	0xF0, 0xC7, 0x34, 0x73, 0xFC, 0x64, 0x6C, 0xEA, 0x30, 0x6B, 0x4B, 0xCB,
	0xC8, 0x86, 0x2F, 0x83, 0x85, 0xDD, 0xFA, 0x9D, 0x4B, 0x7F, 0xA2, 0xC0,
	0x87, 0xE8, 0x79, 0x68, 0x33, 0x03, 0xED, 0x5B, 0xDD, 0x3A, 0x06, 0x2B,
	0x3C, 0xF5, 0xB3, 0xA2, 0x78, 0xA6, 0x6D, 0x2A, 0x13, 0xF8, 0x3F, 0x44,
	0xF8, 0x2D, 0xDF, 0x31, 0x0E, 0xE0, 0x74, 0xAB, 0x6A, 0x36, 0x45, 0x97,
	0xE8, 0x99, 0xA0, 0x25, 0x5D, 0xC1, 0x64, 0xF3, 0x1C, 0xC5, 0x08, 0x46,
	0x85, 0x1D, 0xF9, 0xAB, 0x48, 0x19, 0x5D, 0xED, 0x7E, 0xA1, 0xB1, 0xD5,
	0x10, 0xBD, 0x7E, 0xE7, 0x4D, 0x73, 0xFA, 0xF3, 0x6B, 0xC3, 0x1E, 0xCF,
	0xA2, 0x68, 0x35, 0x90, 0x46, 0xF4, 0xEB, 0x87, 0x9F, 0x92, 0x40, 0x09,
	0x43, 0x8B, 0x48, 0x1C, 0x6C, 0xD7, 0x88, 0x9A, 0x00, 0x2E, 0xD5, 0xEE,
	0x38, 0x2B, 0xC9, 0x18, 0x1F, 0x10, 0xA7, 0x49, 0x89, 0x0D, 0x41, 0x95,
	0x0C, 0xEA, 0x16, 0xE2, 0xD0, 0xD5, 0x46, 0x4E, 0xE0, 0x5B, 0x16, 0x9B,
	0xB7, 0x8C, 0xB6, 0x8B, 0xA6, 0x32, 0x17, 0x0D, 0xD0, 0xF1, 0xFA, 0x68,
	0x46, 0x4B, 0x64, 0x7E, 0x65, 0xDD, 0x13, 0x5E, 0x23, 0x6D, 0x52, 0x5F,
	0x54, 0x75, 0x1B, 0x65, 0xE4, 0x82, 0xD7, 0xCE, 0x6E, 0x74, 0xFE, 0xF6,
	0xD5, 0x5E, 0x70, 0x2F, 0x46, 0x98, 0x0C, 0x82, 0xB5, 0xA8, 0x40, 0x31,
	0x90, 0x0B, 0x1C, 0x9E, 0x59, 0xE7, 0xC9, 0x7F, 0xBE, 0xC7, 0xE8, 0xF3,
	0x23, 0xA9, 0x7A, 0x7E, 0x36, 0xCC, 0x88, 0xBE, 0x0F, 0x1D, 0x45, 0xB7,
	0xFF, 0x58, 0x5A, 0xC5,
}

var ffdhe2048_g = []byte{0x02}
var ffdhe2048_p_number = new(big.Int).SetBytes(ffdhe2048_p)
var ffdhe2048_g_number = new(big.Int).SetBytes(ffdhe2048_g)

type DHEPms struct {
	X *big.Int // private value
	Y *big.Int // public value
}

func NewDHEPms() (*DHEPms, error) {

	var err error
	var newPms DHEPms

	newPms.X, err = computePrivateDH()
	if err != nil {
		return nil, fmt.Errorf("computePrivateDH: %v", err)
	}

	newPms.Y = computePublicDH(newPms.X)
	if newPms.Y == nil {
		return nil, fmt.Errorf("computePublicDH returned nil")
	}

	return &newPms, nil
}

func EncodeDHE(pms *DHEPms) ([]byte, error) {

	var buffer []byte

	if pms == nil || pms.X == nil || pms.Y == nil {
		return nil, fmt.Errorf("nil DHE parameters")
	}

	buffer = append(buffer, numberEncode(ffdhe2048_p_number)...)
	buffer = append(buffer, numberEncode(ffdhe2048_g_number)...)
	buffer = append(buffer, numberEncode(pms.Y)...)
	if len(buffer) == 0 {
		return nil, fmt.Errorf("encoded DHE parameters are empty")
	}

	return buffer, nil
}

// Generates a private key for Diffie-Hellman key exchange
// This function generates a random integer in the range [2, p-2]
// where p is the prime number used in the Diffie-Hellman key exchange.
func computePrivateDH() (*big.Int, error) {

	xs, err := rand.Int(rand.Reader, new(big.Int).Sub(ffdhe2048_p_number,
		big.NewInt(2)))
	if err != nil {
		return nil, fmt.Errorf("GeneratePrivateExp: %v", err)
	}

	xs.Add(xs, big.NewInt(2))
	return xs, nil
}

func computePublicDH(xs *big.Int) *big.Int {
	return new(big.Int).Exp(ffdhe2048_g_number, xs, ffdhe2048_p_number)
}

// encodes a big.Int number into a byte slice.
// The format is [2 bytes length] [number bytes].
// The length is the number of bytes in the number
func numberEncode(number *big.Int) []byte {

	var buffer []byte

	if number == nil {
		return nil
	}

	bytes := number.Bytes()
	if len(bytes) == 0 {
		return nil
	}

	buffer = make([]byte, 2+len(bytes))
	binary.BigEndian.PutUint16(buffer, uint16(len(bytes)))
	copy(buffer[2:], bytes)
	return buffer
}
